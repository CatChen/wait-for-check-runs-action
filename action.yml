name: 'Wait for Checks'
description: 'Wait for all checks to complete for a Pull Request, commit, branch or tag.'
inputs:
  github-token:
    description: 'GitHub token.'
    required: false
    default: ${{ github.token }}
  ref:
    description: 'Specify a branch, tag or SHA. This defaults to the reference or SHA for the workflow event.'
    required: false
    default: ${{ github.head_ref || github.ref_name || github.sha }}
  timeout:
    description: 'The time allowance in seconds for waiting the checks to pass.'
    required: false
    default: 0
  checks-watch-interval:
    description: 'Refresh interval in seconds when using waiting for checks.'
    required: false
    default: 10
runs:
  using: 'composite'
  steps:
    - name: Get current workflow run
      id: get-current-workflow-run
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        REPO: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
      run: |
        echo "::notice::Workflow run id is $RUN_ID"

        WORKFLOW_RUN=$(gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "/repos/$REPO/actions/runs/$RUN_ID" \
          --jq 'pick (.name, .html_url, .path, .node_id)')
        WORKFLOW_RUN_GLOBAL_ID=$(echo "$WORKFLOW_RUN" | jq -r '.node_id')
        echo "::notice::Workflow run global id is $WORKFLOW_RUN_GLOBAL_ID"

        # WORKFLOW=$(gh api graphql \
        #     -H "X-Github-Next-Global-ID: 1" \
        #     -f query='query {
        #       node(id: "'"$WORKFLOW_RUN_GLOBAL_ID"'") {
        #         ... on WorkflowRun {
        #           workflow {
        #             id
        #             databaseId
        #           }
        #         }
        #       }
        #     }' \
        #     --jq '.data.node.workflow')

        JOB_IDS=$(gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "/repos/$REPO/actions/runs/$RUN_ID/jobs" \
          --jq '[.jobs[].id]' |
          jq -c '.')
        JOB_ID_LIST=$(echo $JOB_IDS | jq -r '.[]' | tr '\n' ',' | sed -E 's/,/, /g; s/, $/\n/g')
        echo "::notice::Ids of all jobs in the workflow run are $JOB_ID_LIST"
        echo "$JOB_IDS" | jq '.'

        echo "job-ids=$JOB_IDS" >> $GITHUB_OUTPUT

    - name: Get git ref metadata
      id: get-git-ref-metadata
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        REF: ${{ inputs.ref }}
      run: |
        echo "::notice::Git reference is $REF"

        if (git cat-file -t "$REF")
        then
          SHA=$(git rev-parse --short "$REF")

          REF_NAME=$(git name-rev --name-only "$REF")
          # if [[ -z "$REF_NAME" ]]
          # then
          #   GIT_MAX_DEPTH=2147483647 # 0x7fffffff
          #   git fetch --depth=$GIT_MAX_DEPTH origin "$REF_NAME"
          #   REF_NAME=$(git name-rev --name-only "$REF")
          # fi

          if [[ "$REF" != "$REF_NAME" ]]
          then
            echo "::notice::$REF is $REF_NAME"
          fi

          REF_FULL_NAME=$(git rev-parse --symbolic-full-name "$REF_NAME")
        else
          REF_FULL_NAME=$(git show-ref "$REF" | cut -d ' ' -f 2)

          SHA=$(git rev-parse --short "$REF_FULL_NAME")
        fi

        echo "sha=$SHA" >> $GITHUB_OUTPUT
        echo "ref-full-name=$REF_FULL_NAME" >> $GITHUB_OUTPUT

        if ! (SHORT_SHA_LENGTH=$(git config --get core.abbrev))
        then
          SHORT_SHA_LENGTH=7
        fi
        echo "::notice::git config core.abbrev is $SHORT_SHA_LENGTH"

        if [[ "$REF" != "$SHA" && "${REF:0:$SHORT_SHA_LENGTH}" != "$SHA" ]]
        then
          echo "::notice::$REF is $SHA"
        fi

        if [[ "$REF" != "$REF_FULL_NAME" ]]
        then
          echo "::notice::$REF is $REF_FULL_NAME"
        fi

    - name: Watch checks
      id: watch-checks
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        REPO: ${{ github.repository }}
        JOB_IDS: ${{ steps.get-current-workflow-run.outputs.job-ids }}
        SHA: ${{ steps.get-git-ref-metadata.outputs.sha }}
        TIMEOUT: ${{ inputs.timeout }}
        CHECKS_WATCH_INTERVAL: ${{ inputs.checks-watch-interval }}
      run: |
        while :
        do
          sleep $CHECKS_WATCH_INTERVAL

          echo "::group::Checks"
          CHECK_RUNS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/$REPO/commits/$SHA/check-runs" \
            --jq '[.check_runs.[] | pick (.id, .external_id, .name, .html_url, .status, .conclusion)]')

          EXTERNAL_IDS=$(echo "$CHECK_RUNS" |
            jq -c --argjson job_ids "$JOB_IDS" \
            '[.[] | select(.id | [.] | inside($job_ids)) | .external_id ]')
          EXTERNAL_ID_LIST=$(echo "$EXTERNAL_IDS" | jq -r '.[]' | tr '\n' ',' | sed -E 's/,/, /g; s/, $/\n/g')
          echo "::notice::External ids associated with any job in the workflow run are $EXTERNAL_ID_LIST"

          RELEVANT_CHECKS=$(echo "$CHECK_RUNS" |
            jq \
            --argjson job_ids "$JOB_IDS" \
            --argjson external_ids "$EXTERNAL_IDS" \
            '[.[] | select(.id | [.] | inside($job_ids) | not) | select(.external_id | [.] | inside($external_ids) | not)]')

          INCOMPLETE_CHECKS=$(echo "$RELEVANT_CHECKS" | jq '[.[] | select(.status != "completed")]')
          INCOMPLETE_CHECK_COUNT=$(echo "$INCOMPLETE_CHECKS" | jq '. | length')

          FAILED_CHECKS=$(echo "$RELEVANT_CHECKS" | jq '[.[] | select(.status == "completed" and (.conclusion == null or (.conclusion != "success" and .conclusion != "skipped" and .conclusion != "neutral")))]')
          FAILED_CHECK_COUNT=$(echo "$FAILED_CHECKS" | jq '. | length')

          CHECK_RUNS_TEXT=$(echo "$CHECK_RUNS" | jq -r \
            --argjson job_ids "$JOB_IDS" \
            --argjson external_ids "$EXTERNAL_IDS" \
            '.[] | 
            .name + "\n" + 
            "  Id: " + (.id | tostring) + " (" + .html_url + ")\n" + 
            "  Status: " + .status + "\n" + 
            "  Conclusion: " + .conclusion + "\n" + 
            (if .id | [.] | inside($job_ids) then "  This check is a job in the current Workflow.\n" elif .external_id | [.] | inside($external_ids) then "  This check is a job in another instance of the same Workflow.\n" else "" end)')
          echo "$CHECK_RUNS_TEXT"
          echo "::endgroup::"

          if [[ $INCOMPLETE_CHECK_COUNT -eq 0 || $FAILED_CHECK_COUNT -gt 0 ]]
          then
            break
          fi
        done

        echo "check-runs=$CHECK_RUNS" >> $GITHUB_OUTPUT

        if [[ $FAILED_CHECK_COUNT -gt 0 ]]
        then
          echo "conclusion=failure" >> $GITHUB_OUTPUT

          FAILED_CHECK_LIST=$(echo $FAILED_CHECKS | jq -r '.[] | .name' | tr '\n' '\t' | sed -E 's/\t/, /g; s/, $/\n/g')
          echo "::error::Failed checks: $FAILED_CHECK_LIST"

          if [[ $INCOMPLETE_CHECK_COUNT -gt 0 ]]
          then
            INCOMPLETE_CHECK_LIST=$(echo $INCOMPLETE_CHECKS | jq -r '.[] | .name' | tr '\n' '\t' | sed -E 's/\t/, /g; s/, $/\n/g')
            echo "::warning::Pending checks: $INCOMPLETE_CHECK_LIST"
          fi
          exit 1
        else
          echo "conclusion=success" >> $GITHUB_OUTPUT

          SUCCESS_CHECKS=$(echo "$RELEVANT_CHECKS" | jq '[.[] | select(.conclusion == "success")]')
          SUCCESS_CHECK_COUNT=$(echo "$SUCCESS_CHECKS" | jq '. | length')
          if [[ $SUCCESS_CHECK_COUNT -gt 0 ]]
          then
            SUCCESS_CHECK_LIST=$(echo $SUCCESS_CHECKS | jq -r '.[] | .name' | tr '\n' '\t' | sed -E 's/\t/, /g; s/, $/\n/g')
            echo "::notice::Success checks: $SUCCESS_CHECK_LIST"
          fi

          SKIPPED_CHECKS=$(echo "$RELEVANT_CHECKS" | jq '[.[] | select(.conclusion == "skipped")]')
          SKIPPED_CHECK_COUNT=$(echo "$SKIPPED_CHECKS" | jq '. | length')
          if [[ $SKIPPED_CHECK_COUNT -gt 0 ]]
          then
            SKIPPED_CHECK_LIST=$(echo $SKIPPED_CHECKS | jq -r '.[] | .name' | tr '\n' '\t' | sed -E 's/\t/, /g; s/, $/\n/g')
            echo "::notice::Skipped checks: $SKIPPED_CHECK_LIST"
          fi

          NEUTRAL_CHECKS=$(echo "$RELEVANT_CHECKS" | jq '[.[] | select(.conclusion == "neutral")]')
          NEUTRAL_CHECK_COUNT=$(echo "$NEUTRAL_CHECKS" | jq '. | length')
          if [[ $NEUTRAL_CHECK_COUNT -gt 0 ]]
          then
            NEUTRAL_CHECK_LIST=$(echo $NEUTRAL_CHECKS | jq -r '.[] | .name' | tr '\n' '\t' | sed -E 's/\t/, /g; s/, $/\n/g')
            echo "::notice::Neutral checks: $NEUTRAL_CHECK_LIST"
          fi
        fi

branding:
  icon: 'clock'
  color: 'yellow'
